//list of global vars


//The game object
//contains info on game state and is a place to store
var game = {
  boardSeq: [],
  userSeq: [],
  UserTurn: false,
  level: 0,
  score: 0,
// function to start game
// have a function/object that sets level # stores game data based on that
  // computer's turn-
  // create a sequence of random tile light ups (pushed to boardSeq)
  // function to light pads in sequence according to BoardSeq array
  // function for sound that is triggered w/ light up
  // at end of turn or beginning of player turn switch userTurn to true

  // player's turn-
    // create a function that records the sequence of click events (pushed to userSeq)
    // function to check whether or not boardSeq === userSeq
      // if true, advance to the next level
      // else, end/restart game and check for a highscore
    //log score and/or level number

  //starts the game after user presses start button
  start: function() {
  $('#start').click(function(){
    this.newGame();
  });
  },

  //start a new game @ level 1, score 0, and empty sequence arrays
  newGame: function() {
    this.boardSeq = [];
    this.userSeq = [];
    this.level = 0;
    this.userTurn = false;
    this.levelUp();
  },

  //tell game what to do based on the current level
  levelUp: function() {
    ++this.level;
    $('#level').text(this.level);
    this.boardSeq.push(this.randomNo()); //add a tile to sequence
    this.userSeq = this.boardSeq.slice(0);
    this.playSequence(boardSeq); //play the sequence the user needs to repeat
  },

  //play the sequence generated by createBoardSequence
  playSequence: function(boardSeq) {
    var i = 0;
  	  var interval = setInterval(function() {
  			this.playSound(boardSeq[i]);
  			this.lightTile(boardSeq[i]);
  			i++;
  			if (i >= boardSeq.length) {
  				clearInterval(interval);
  				this.player();
  			}
  		}, 600);
  	},

  //this function fires after the sequence is played for the user
  //it makes the board clickable to the player
  player: function() {
    this.userTurn = true;
    var desiredResponse = this.copy.shift();
			var actualResponse = $(e.target).data('tile');
			this.userTurn = (desiredResponse === actualResponse);
			this.checkLose();
  },
  // after player function completes
  checkLose: function() {
			if (this.userSeq.length === 0 && this.userTurn) {
				this.levelUp();
        //if user clicked wrong tile
			} else if (!this.userTurn) {
				this.endGame();
			}
		},
  //listen for clicks making sure they match the tiles sequence in boardSeq
  //set off loser function if wrong tile is clicked
  //if all correct tiles are clicked advance to next level
  //in both cases userTurn will be set to false at the end.
  //this will probably need additional functions. Maybe a checkForLoss
  clickHandling: function() {

  },

  // light tile-- according to .lit css
  //look up data item
  lightTile: function(tile) {
  				var $tile = $("[data-tile=" + tile + "]").addClass('lit');
  				window.setTimeout(function() {
  					$tile.removeClass('lit');
  				}, 300);
  },

  //method to play a sound on cue with lightTile
  playSound: function(sound) {
    var g = new Audio("https://s3.amazonaws.com/freecodecamp/simonSound1.mp3");
    var r = new Audio("https://s3.amazonaws.com/freecodecamp/simonSound2.mp3");
    var b = new Audio("https://s3.amazonaws.com/freecodecamp/simonSound3.mp3");
    var y = new Audio("https://s3.amazonaws.com/freecodecamp/simonSound2.mp3");
    var soundArr = [g,r,b,y];
    soundArr[sound].play();
  },

  //function to add random number between 1-4 to sequence. Needs to push a new value to array at beginning of level
  randomNo: function() {
      return Math.ceil(Math.random() * 4);
  },

  //deactivate board and set level back to 0
  endGame: function() {

  }

  }
